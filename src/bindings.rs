// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod component {
    pub mod iced_thawing {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Element {
                handle: _rt::Resource<Element>,
            }
            impl Element {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Element {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:iced-thawing/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]element"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            pub type Pixels = f32;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Color {
                pub r: f32,
                pub g: f32,
                pub b: f32,
                pub a: f32,
            }
            impl ::core::fmt::Debug for Color {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Color")
                        .field("r", &self.r)
                        .field("g", &self.g)
                        .field("b", &self.b)
                        .field("a", &self.a)
                        .finish()
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[derive(Clone, Copy)]
            pub enum Message {
                Increment,
                Decrement,
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Message::Increment => {
                            f.debug_tuple("Message::Increment").finish()
                        }
                        Message::Decrement => {
                            f.debug_tuple("Message::Decrement").finish()
                        }
                    }
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod widget {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Element = super::super::super::component::iced_thawing::types::Element;
            pub type Pixels = super::super::super::component::iced_thawing::types::Pixels;
            pub type Color = super::super::super::component::iced_thawing::types::Color;
            pub type Message = super::super::super::component::iced_thawing::host::Message;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Callback {
                handle: _rt::Resource<Callback>,
            }
            impl Callback {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Callback {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[resource-drop]callback"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Button {
                handle: _rt::Resource<Button>,
            }
            impl Button {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Button {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[resource-drop]button"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Column {
                handle: _rt::Resource<Column>,
            }
            impl Column {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Column {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[resource-drop]column"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Text {
                handle: _rt::Resource<Text>,
            }
            impl Text {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Text {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[resource-drop]text"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl Callback {
                #[allow(unused_unsafe, clippy::all)]
                pub fn on_press_with() -> Callback {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[static]callback.on-press-with"]
                            fn wit_import() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Callback::from_handle(ret as u32)
                    }
                }
            }
            impl Button {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(content: Element) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[constructor]button"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((&content).take_handle() as i32);
                        Button::from_handle(ret as u32)
                    }
                }
            }
            impl Button {
                #[allow(unused_unsafe, clippy::all)]
                pub fn on_press(&self, message: Message) -> Button {
                    unsafe {
                        use super::super::super::component::iced_thawing::host::Message as V0;
                        let result1 = match message {
                            V0::Increment => 0i32,
                            V0::Decrement => 1i32,
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[method]button.on-press"]
                            fn wit_import(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, result1);
                        Button::from_handle(ret as u32)
                    }
                }
            }
            impl Button {
                #[allow(unused_unsafe, clippy::all)]
                pub fn on_press_with(&self, cb: Callback) -> Button {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[method]button.on-press-with"]
                            fn wit_import(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            (&cb).take_handle() as i32,
                        );
                        Button::from_handle(ret as u32)
                    }
                }
            }
            impl Button {
                #[allow(unused_unsafe, clippy::all)]
                pub fn into_element(&self) -> Element {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[method]button.into-element"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::component::iced_thawing::types::Element::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[constructor]column"]
                            fn wit_import() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Column::from_handle(ret as u32)
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn push(&self, child: Element) -> Column {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[method]column.push"]
                            fn wit_import(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            (&child).take_handle() as i32,
                        );
                        Column::from_handle(ret as u32)
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn into_element(&self) -> Element {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[method]column.into-element"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::component::iced_thawing::types::Element::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl Text {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(fragment: &str) -> Self {
                    unsafe {
                        let vec0 = fragment;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[constructor]text"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        Text::from_handle(ret as u32)
                    }
                }
            }
            impl Text {
                #[allow(unused_unsafe, clippy::all)]
                pub fn size(&self, size: Pixels) -> Text {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[method]text.size"]
                            fn wit_import(_: i32, _: f32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, _rt::as_f32(size));
                        Text::from_handle(ret as u32)
                    }
                }
            }
            impl Text {
                #[allow(unused_unsafe, clippy::all)]
                pub fn color(&self, color: Color) -> Text {
                    unsafe {
                        let super::super::super::component::iced_thawing::types::Color {
                            r: r0,
                            g: g0,
                            b: b0,
                            a: a0,
                        } = color;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[method]text.color"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(r0),
                            _rt::as_f32(g0),
                            _rt::as_f32(b0),
                            _rt::as_f32(a0),
                        );
                        Text::from_handle(ret as u32)
                    }
                }
            }
            impl Text {
                #[allow(unused_unsafe, clippy::all)]
                pub fn into_element(&self) -> Element {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:iced-thawing/widget")]
                        extern "C" {
                            #[link_name = "[method]text.into-element"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::component::iced_thawing::types::Element::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod component {
        pub mod iced_thawing {
            #[allow(dead_code, clippy::all)]
            pub mod guest {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Element = super::super::super::super::component::iced_thawing::types::Element;
                pub type Message = super::super::super::super::component::iced_thawing::host::Message;
                pub type Callback = super::super::super::super::component::iced_thawing::widget::Callback;
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct App {
                    handle: _rt::Resource<App>,
                }
                type _AppRep<T> = Option<T>;
                impl App {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `App`.
                    pub fn new<T: GuestApp>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _AppRep<T> = Some(val);
                        let ptr: *mut _AppRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestApp>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestApp>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestApp>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _AppRep<T>);
                    }
                    fn as_ptr<T: GuestApp>(&self) -> *mut _AppRep<T> {
                        App::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`App`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct AppBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a App>,
                }
                impl<'a> AppBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestApp>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _AppRep<T> {
                        App::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for App {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:iced-thawing/guest"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]app"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_app_cabi<T: GuestApp>(
                    arg0: i64,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = App::new(T::new(arg0));
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_app_view_cabi<T: GuestApp>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::view(AppBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_run_cabi<T: Guest>(arg0: i32) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::run(
                        super::super::super::super::component::iced_thawing::widget::Callback::from_handle(
                            arg0 as u32,
                        ),
                    );
                    use super::super::super::super::component::iced_thawing::host::Message as V1;
                    let result2 = match result0 {
                        V1::Increment => 0i32,
                        V1::Decrement => 1i32,
                    };
                    result2
                }
                pub trait Guest {
                    type App: GuestApp;
                    fn run(cb: Callback) -> Message;
                }
                pub trait GuestApp: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:iced-thawing/guest"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]app"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:iced-thawing/guest"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]app"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(value: i64) -> Self;
                    fn view(&self) -> Element;
                }
                #[doc(hidden)]
                macro_rules! __export_component_iced_thawing_guest_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "component:iced-thawing/guest#[constructor]app"] unsafe extern
                        "C" fn export_constructor_app(arg0 : i64,) -> i32 {
                        $($path_to_types)*:: _export_constructor_app_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::App > (arg0) } #[export_name =
                        "component:iced-thawing/guest#[method]app.view"] unsafe extern
                        "C" fn export_method_app_view(arg0 : * mut u8,) -> i32 {
                        $($path_to_types)*:: _export_method_app_view_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::App > (arg0) } #[export_name =
                        "component:iced-thawing/guest#run"] unsafe extern "C" fn
                        export_run(arg0 : i32,) -> i32 { $($path_to_types)*::
                        _export_run_cabi::<$ty > (arg0) } const _ : () = { #[doc(hidden)]
                        #[export_name = "component:iced-thawing/guest#[dtor]app"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: App::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::App > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_component_iced_thawing_guest_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_thawing_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::component::iced_thawing::guest::__export_component_iced_thawing_guest_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::component::iced_thawing::guest);
    };
}
#[doc(inline)]
pub(crate) use __export_thawing_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:component:iced-thawing:thawing:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1244] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xde\x08\x01A\x02\x01\
A\x0d\x01B\x05\x04\0\x07element\x03\x01\x01v\x04\0\x06pixels\x03\0\x01\x01r\x04\x01\
rv\x01gv\x01bv\x01av\x04\0\x05color\x03\0\x03\x03\0\x1ccomponent:iced-thawing/ty\
pes\x05\0\x01B\x02\x01q\x02\x09increment\0\0\x09decrement\0\0\x04\0\x07message\x03\
\0\0\x03\0\x1bcomponent:iced-thawing/host\x05\x01\x02\x03\0\0\x07element\x02\x03\
\0\0\x06pixels\x02\x03\0\0\x05color\x02\x03\0\x01\x07message\x01B,\x02\x03\x02\x01\
\x02\x04\0\x07element\x03\0\0\x02\x03\x02\x01\x03\x04\0\x06pixels\x03\0\x02\x02\x03\
\x02\x01\x04\x04\0\x05color\x03\0\x04\x02\x03\x02\x01\x05\x04\0\x07message\x03\0\
\x06\x04\0\x08callback\x03\x01\x04\0\x06button\x03\x01\x04\0\x06column\x03\x01\x04\
\0\x04text\x03\x01\x01i\x08\x01@\0\0\x0c\x04\0\x1e[static]callback.on-press-with\
\x01\x0d\x01i\x01\x01i\x09\x01@\x01\x07content\x0e\0\x0f\x04\0\x13[constructor]b\
utton\x01\x10\x01h\x09\x01@\x02\x04self\x11\x07message\x07\0\x0f\x04\0\x17[metho\
d]button.on-press\x01\x12\x01@\x02\x04self\x11\x02cb\x0c\0\x0f\x04\0\x1c[method]\
button.on-press-with\x01\x13\x01@\x01\x04self\x11\0\x0e\x04\0\x1b[method]button.\
into-element\x01\x14\x01i\x0a\x01@\0\0\x15\x04\0\x13[constructor]column\x01\x16\x01\
h\x0a\x01@\x02\x04self\x17\x05child\x0e\0\x15\x04\0\x13[method]column.push\x01\x18\
\x01@\x01\x04self\x17\0\x0e\x04\0\x1b[method]column.into-element\x01\x19\x01i\x0b\
\x01@\x01\x08fragments\0\x1a\x04\0\x11[constructor]text\x01\x1b\x01h\x0b\x01@\x02\
\x04self\x1c\x04size\x03\0\x1a\x04\0\x11[method]text.size\x01\x1d\x01@\x02\x04se\
lf\x1c\x05color\x05\0\x1a\x04\0\x12[method]text.color\x01\x1e\x01@\x01\x04self\x1c\
\0\x0e\x04\0\x19[method]text.into-element\x01\x1f\x03\0\x1dcomponent:iced-thawin\
g/widget\x05\x06\x02\x03\0\x02\x08callback\x01B\x11\x02\x03\x02\x01\x02\x04\0\x07\
element\x03\0\0\x02\x03\x02\x01\x05\x04\0\x07message\x03\0\x02\x02\x03\x02\x01\x07\
\x04\0\x08callback\x03\0\x04\x04\0\x03app\x03\x01\x01i\x06\x01@\x01\x05valuex\0\x07\
\x04\0\x10[constructor]app\x01\x08\x01h\x06\x01i\x01\x01@\x01\x04self\x09\0\x0a\x04\
\0\x10[method]app.view\x01\x0b\x01i\x05\x01@\x01\x02cb\x0c\0\x03\x04\0\x03run\x01\
\x0d\x04\0\x1ccomponent:iced-thawing/guest\x05\x08\x04\0\x1ecomponent:iced-thawi\
ng/thawing\x04\0\x0b\x0d\x01\0\x07thawing\x03\0\0\0G\x09producers\x01\x0cprocess\
ed-by\x02\x0dwit-component\x070.220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
