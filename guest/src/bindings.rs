// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * pub-export-macro
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod thawing {
    pub mod core {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Closure {
                handle: _rt::Resource<Closure>,
            }
            impl Closure {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Closure {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "thawing:core/types")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]closure"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Element {
                handle: _rt::Resource<Element>,
            }
            impl Element {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Element {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "thawing:core/types")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]element"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            pub type Bytes = _rt::Vec<u8>;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Pixels {
                pub amount: f32,
            }
            impl ::core::fmt::Debug for Pixels {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Pixels").field("amount", &self.amount).finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Color {
                pub r: f32,
                pub g: f32,
                pub b: f32,
                pub a: f32,
            }
            impl ::core::fmt::Debug for Color {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Color")
                        .field("r", &self.r)
                        .field("g", &self.g)
                        .field("b", &self.b)
                        .field("a", &self.a)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Padding {
                pub top: f32,
                pub right: f32,
                pub bottom: f32,
                pub left: f32,
            }
            impl ::core::fmt::Debug for Padding {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Padding")
                        .field("top", &self.top)
                        .field("right", &self.right)
                        .field("bottom", &self.bottom)
                        .field("left", &self.left)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum Length {
                Fill,
                FillPortion(u16),
                Shrink,
                Fixed(f32),
            }
            impl ::core::fmt::Debug for Length {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Length::Fill => f.debug_tuple("Length::Fill").finish(),
                        Length::FillPortion(e) => {
                            f.debug_tuple("Length::FillPortion").field(e).finish()
                        }
                        Length::Shrink => f.debug_tuple("Length::Shrink").finish(),
                        Length::Fixed(e) => {
                            f.debug_tuple("Length::Fixed").field(e).finish()
                        }
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Horizontal {
                Left,
                Center,
                Right,
            }
            impl ::core::fmt::Debug for Horizontal {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Horizontal::Left => f.debug_tuple("Horizontal::Left").finish(),
                        Horizontal::Center => {
                            f.debug_tuple("Horizontal::Center").finish()
                        }
                        Horizontal::Right => f.debug_tuple("Horizontal::Right").finish(),
                    }
                }
            }
            impl Horizontal {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Horizontal {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Horizontal::Left,
                        1 => Horizontal::Center,
                        2 => Horizontal::Right,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            impl Closure {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/types")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]closure"]
                            fn wit_import0() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0() -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0() };
                        unsafe { Closure::from_handle(ret as u32) }
                    }
                }
            }
            impl Closure {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/types")]
                        unsafe extern "C" {
                            #[link_name = "[method]closure.id"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        ret as u32
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod widget {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Element = super::super::super::thawing::core::types::Element;
            pub type Closure = super::super::super::thawing::core::types::Closure;
            pub type Pixels = super::super::super::thawing::core::types::Pixels;
            pub type Padding = super::super::super::thawing::core::types::Padding;
            pub type Length = super::super::super::thawing::core::types::Length;
            pub type Horizontal = super::super::super::thawing::core::types::Horizontal;
            pub type Color = super::super::super::thawing::core::types::Color;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Button {
                handle: _rt::Resource<Button>,
            }
            impl Button {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Button {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]button"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Checkbox {
                handle: _rt::Resource<Checkbox>,
            }
            impl Checkbox {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Checkbox {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]checkbox"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Column {
                handle: _rt::Resource<Column>,
            }
            impl Column {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Column {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]column"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Text {
                handle: _rt::Resource<Text>,
            }
            impl Text {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Text {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]text"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct TextInput {
                handle: _rt::Resource<TextInput>,
            }
            impl TextInput {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for TextInput {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]text-input"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Button {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(content: Element) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]button"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0((&content).take_handle() as i32)
                        };
                        unsafe { Button::from_handle(ret as u32) }
                    }
                }
            }
            impl Button {
                #[allow(unused_unsafe, clippy::all)]
                pub fn on_press_with(&self, on_press: Closure) -> Button {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]button.on-press-with"]
                            fn wit_import0(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0(
                                (self).handle() as i32,
                                (&on_press).take_handle() as i32,
                            )
                        };
                        unsafe { Button::from_handle(ret as u32) }
                    }
                }
            }
            impl Button {
                #[allow(unused_unsafe, clippy::all)]
                pub fn into_element(&self) -> Element {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]button.into-element"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::thawing::core::types::Element::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl Checkbox {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(label: &str, is_checked: bool) -> Self {
                    unsafe {
                        let vec0 = label;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]checkbox"]
                            fn wit_import1(_: *mut u8, _: usize, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import1(
                                ptr0.cast_mut(),
                                len0,
                                match &is_checked {
                                    true => 1,
                                    false => 0,
                                },
                            )
                        };
                        unsafe { Checkbox::from_handle(ret as u32) }
                    }
                }
            }
            impl Checkbox {
                #[allow(unused_unsafe, clippy::all)]
                pub fn on_toggle(&self, on_toggle: Closure) -> Checkbox {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]checkbox.on-toggle"]
                            fn wit_import0(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0(
                                (self).handle() as i32,
                                (&on_toggle).take_handle() as i32,
                            )
                        };
                        unsafe { Checkbox::from_handle(ret as u32) }
                    }
                }
            }
            impl Checkbox {
                #[allow(unused_unsafe, clippy::all)]
                pub fn into_element(&self) -> Element {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]checkbox.into-element"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::thawing::core::types::Element::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]column"]
                            fn wit_import0() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0() -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0() };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn from_vec(children: _rt::Vec<Element>) -> Column {
                    unsafe {
                        let vec0 = &children;
                        let len0 = vec0.len();
                        let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec0.len() * 4,
                            4,
                        );
                        let result0 = if layout0.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout0);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec0.into_iter().enumerate() {
                            let base = result0.add(i * 4);
                            {
                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[static]column.from-vec"]
                            fn wit_import1(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import1(result0, len0) };
                        if layout0.size() != 0 {
                            _rt::alloc::dealloc(result0.cast(), layout0);
                        }
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn spacing(&self, amount: Pixels) -> Column {
                    unsafe {
                        let super::super::super::thawing::core::types::Pixels {
                            amount: amount0,
                        } = amount;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.spacing"]
                            fn wit_import1(_: i32, _: f32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import1((self).handle() as i32, _rt::as_f32(amount0))
                        };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn padding(&self, padding: Padding) -> Column {
                    unsafe {
                        let super::super::super::thawing::core::types::Padding {
                            top: top0,
                            right: right0,
                            bottom: bottom0,
                            left: left0,
                        } = padding;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.padding"]
                            fn wit_import1(
                                _: i32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                _rt::as_f32(top0),
                                _rt::as_f32(right0),
                                _rt::as_f32(bottom0),
                                _rt::as_f32(left0),
                            )
                        };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn width(&self, width: Length) -> Column {
                    unsafe {
                        use super::super::super::thawing::core::types::Length as V0;
                        let (result1_0, result1_1) = match width {
                            V0::Fill => (0i32, 0i32),
                            V0::FillPortion(e) => (1i32, _rt::as_i32(e)),
                            V0::Shrink => (2i32, 0i32),
                            V0::Fixed(e) => (3i32, (_rt::as_f32(e)).to_bits() as i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.width"]
                            fn wit_import2(_: i32, _: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(_: i32, _: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import2((self).handle() as i32, result1_0, result1_1)
                        };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn height(&self, height: Length) -> Column {
                    unsafe {
                        use super::super::super::thawing::core::types::Length as V0;
                        let (result1_0, result1_1) = match height {
                            V0::Fill => (0i32, 0i32),
                            V0::FillPortion(e) => (1i32, _rt::as_i32(e)),
                            V0::Shrink => (2i32, 0i32),
                            V0::Fixed(e) => (3i32, (_rt::as_f32(e)).to_bits() as i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.height"]
                            fn wit_import2(_: i32, _: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(_: i32, _: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import2((self).handle() as i32, result1_0, result1_1)
                        };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn max_width(&self, width: Pixels) -> Column {
                    unsafe {
                        let super::super::super::thawing::core::types::Pixels {
                            amount: amount0,
                        } = width;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.max-width"]
                            fn wit_import1(_: i32, _: f32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import1((self).handle() as i32, _rt::as_f32(amount0))
                        };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn align_x(&self, align: Horizontal) -> Column {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.align-x"]
                            fn wit_import0(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0((self).handle() as i32, align.clone() as i32)
                        };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn clip(&self, clip: bool) -> Column {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.clip"]
                            fn wit_import0(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0(
                                (self).handle() as i32,
                                match &clip {
                                    true => 1,
                                    false => 0,
                                },
                            )
                        };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn push(&self, child: Element) -> Column {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.push"]
                            fn wit_import0(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0(
                                (self).handle() as i32,
                                (&child).take_handle() as i32,
                            )
                        };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn extend(&self, children: _rt::Vec<Element>) -> Column {
                    unsafe {
                        let vec0 = &children;
                        let len0 = vec0.len();
                        let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec0.len() * 4,
                            4,
                        );
                        let result0 = if layout0.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout0);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec0.into_iter().enumerate() {
                            let base = result0.add(i * 4);
                            {
                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.extend"]
                            fn wit_import1(_: i32, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import1((self).handle() as i32, result0, len0)
                        };
                        if layout0.size() != 0 {
                            _rt::alloc::dealloc(result0.cast(), layout0);
                        }
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn into_element(&self) -> Element {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.into-element"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::thawing::core::types::Element::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl Text {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(fragment: &str) -> Self {
                    unsafe {
                        let vec0 = fragment;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]text"]
                            fn wit_import1(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                        unsafe { Text::from_handle(ret as u32) }
                    }
                }
            }
            impl Text {
                #[allow(unused_unsafe, clippy::all)]
                pub fn size(&self, size: Pixels) -> Text {
                    unsafe {
                        let super::super::super::thawing::core::types::Pixels {
                            amount: amount0,
                        } = size;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]text.size"]
                            fn wit_import1(_: i32, _: f32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import1((self).handle() as i32, _rt::as_f32(amount0))
                        };
                        unsafe { Text::from_handle(ret as u32) }
                    }
                }
            }
            impl Text {
                #[allow(unused_unsafe, clippy::all)]
                pub fn color(&self, color: Color) -> Text {
                    unsafe {
                        let super::super::super::thawing::core::types::Color {
                            r: r0,
                            g: g0,
                            b: b0,
                            a: a0,
                        } = color;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]text.color"]
                            fn wit_import1(
                                _: i32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(
                            _: i32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                _rt::as_f32(r0),
                                _rt::as_f32(g0),
                                _rt::as_f32(b0),
                                _rt::as_f32(a0),
                            )
                        };
                        unsafe { Text::from_handle(ret as u32) }
                    }
                }
            }
            impl Text {
                #[allow(unused_unsafe, clippy::all)]
                pub fn style(&self, style_fn: Closure) -> Text {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]text.style"]
                            fn wit_import0(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0(
                                (self).handle() as i32,
                                (&style_fn).take_handle() as i32,
                            )
                        };
                        unsafe { Text::from_handle(ret as u32) }
                    }
                }
            }
            impl Text {
                #[allow(unused_unsafe, clippy::all)]
                pub fn into_element(&self) -> Element {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]text.into-element"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::thawing::core::types::Element::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl TextInput {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(placeholder: &str, value: &str) -> Self {
                    unsafe {
                        let vec0 = placeholder;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = value;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]text-input"]
                            fn wit_import2(
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import2(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1)
                        };
                        unsafe { TextInput::from_handle(ret as u32) }
                    }
                }
            }
            impl TextInput {
                #[allow(unused_unsafe, clippy::all)]
                pub fn on_input(&self, on_input: Closure) -> TextInput {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]text-input.on-input"]
                            fn wit_import0(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0(
                                (self).handle() as i32,
                                (&on_input).take_handle() as i32,
                            )
                        };
                        unsafe { TextInput::from_handle(ret as u32) }
                    }
                }
            }
            impl TextInput {
                #[allow(unused_unsafe, clippy::all)]
                pub fn on_submit(&self, on_submit: Closure) -> TextInput {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]text-input.on-submit"]
                            fn wit_import0(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0(
                                (self).handle() as i32,
                                (&on_submit).take_handle() as i32,
                            )
                        };
                        unsafe { TextInput::from_handle(ret as u32) }
                    }
                }
            }
            impl TextInput {
                #[allow(unused_unsafe, clippy::all)]
                pub fn into_element(&self) -> Element {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "thawing:core/widget")]
                        unsafe extern "C" {
                            #[link_name = "[method]text-input.into-element"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::thawing::core::types::Element::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod thawing {
        pub mod core {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod guest {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Element = super::super::super::super::thawing::core::types::Element;
                pub type Closure = super::super::super::super::thawing::core::types::Closure;
                pub type Bytes = super::super::super::super::thawing::core::types::Bytes;
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Table {
                    handle: _rt::Resource<Table>,
                }
                type _TableRep<T> = Option<T>;
                impl Table {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Table`.
                    pub fn new<T: GuestTable>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _TableRep<T> = Some(val);
                        let ptr: *mut _TableRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestTable>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestTable>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestTable>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _TableRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestTable>(&self) -> *mut _TableRep<T> {
                        Table::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Table`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TableBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Table>,
                }
                impl<'a> TableBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestTable>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _TableRep<T> {
                        Table::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Table {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]thawing:core/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]table"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct App {
                    handle: _rt::Resource<App>,
                }
                type _AppRep<T> = Option<T>;
                impl App {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `App`.
                    pub fn new<T: GuestApp>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _AppRep<T> = Some(val);
                        let ptr: *mut _AppRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestApp>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestApp>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestApp>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe { _rt::Box::from_raw(handle as *mut _AppRep<T>) };
                    }
                    fn as_ptr<T: GuestApp>(&self) -> *mut _AppRep<T> {
                        App::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`App`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct AppBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a App>,
                }
                impl<'a> AppBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestApp>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _AppRep<T> {
                        App::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for App {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]thawing:core/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]app"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_table_cabi<T: GuestTable>() -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = Table::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_table_call_cabi<T: GuestTable>(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::call(
                        unsafe { TableBorrow::lift(arg0 as u32 as usize) }.get(),
                        unsafe {
                            super::super::super::super::thawing::core::types::Closure::from_handle(
                                arg1 as u32,
                            )
                        },
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_table_call<T: GuestTable>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_table_call_with_cabi<T: GuestTable>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg3;
                    let result1 = T::call_with(
                        unsafe { TableBorrow::lift(arg0 as u32 as usize) }.get(),
                        unsafe {
                            super::super::super::super::thawing::core::types::Closure::from_handle(
                                arg1 as u32,
                            )
                        },
                        _rt::Vec::from_raw_parts(arg2.cast(), len0, len0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = (result1).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_table_call_with<T: GuestTable>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_app_cabi<T: GuestApp>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let result1 = App::new(
                        T::new(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0)),
                    );
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_app_view_cabi<T: GuestApp>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::view(
                        unsafe { AppBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    (result0).take_handle() as i32
                }
                pub trait Guest {
                    type Table: GuestTable;
                    type App: GuestApp;
                }
                pub trait GuestTable: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]thawing:core/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]table"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]thawing:core/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]table"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new() -> Self;
                    fn call(&self, c: Closure) -> Bytes;
                    fn call_with(&self, c: Closure, state: Bytes) -> Bytes;
                }
                pub trait GuestApp: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]thawing:core/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]app"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]thawing:core/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]app"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(state: Bytes) -> Self;
                    fn view(&self) -> Element;
                }
                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_thawing_core_guest_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "thawing:core/guest#[constructor]table")] unsafe extern "C" fn
                        export_constructor_table() -> i32 { unsafe { $($path_to_types)*::
                        _export_constructor_table_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Table > () } } #[unsafe (export_name =
                        "thawing:core/guest#[method]table.call")] unsafe extern "C" fn
                        export_method_table_call(arg0 : * mut u8, arg1 : i32,) -> * mut
                        u8 { unsafe { $($path_to_types)*::
                        _export_method_table_call_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Table > (arg0, arg1) } } #[unsafe (export_name =
                        "cabi_post_thawing:core/guest#[method]table.call")] unsafe extern
                        "C" fn _post_return_method_table_call(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_method_table_call::<<$ty as
                        $($path_to_types)*:: Guest >::Table > (arg0) } } #[unsafe
                        (export_name = "thawing:core/guest#[method]table.call-with")]
                        unsafe extern "C" fn export_method_table_call_with(arg0 : * mut
                        u8, arg1 : i32, arg2 : * mut u8, arg3 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_method_table_call_with_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Table > (arg0, arg1, arg2, arg3) }
                        } #[unsafe (export_name =
                        "cabi_post_thawing:core/guest#[method]table.call-with")] unsafe
                        extern "C" fn _post_return_method_table_call_with(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_table_call_with::<<$ty as
                        $($path_to_types)*:: Guest >::Table > (arg0) } } #[unsafe
                        (export_name = "thawing:core/guest#[constructor]app")] unsafe
                        extern "C" fn export_constructor_app(arg0 : * mut u8, arg1 :
                        usize,) -> i32 { unsafe { $($path_to_types)*::
                        _export_constructor_app_cabi::<<$ty as $($path_to_types)*:: Guest
                        >::App > (arg0, arg1) } } #[unsafe (export_name =
                        "thawing:core/guest#[method]app.view")] unsafe extern "C" fn
                        export_method_app_view(arg0 : * mut u8,) -> i32 { unsafe {
                        $($path_to_types)*:: _export_method_app_view_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::App > (arg0) } } const _ : () = {
                        #[doc(hidden)] #[unsafe (export_name =
                        "thawing:core/guest#[dtor]table")] #[allow(non_snake_case)]
                        unsafe extern "C" fn dtor(rep : * mut u8) { unsafe {
                        $($path_to_types)*:: Table::dtor::< <$ty as $($path_to_types)*::
                        Guest >::Table > (rep) } } }; const _ : () = { #[doc(hidden)]
                        #[unsafe (export_name = "thawing:core/guest#[dtor]app")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: App::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::App > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub use __export_thawing_core_guest_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
#[macro_export]
macro_rules! __export_thawing_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::thawing::core::guest::__export_thawing_core_guest_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::thawing::core::guest); const _ :
        () = { #[cfg(target_arch = "wasm32")] #[unsafe (link_section =
        "component-type:wit-bindgen:0.41.0:thawing:core:thawing:imports and exports")]
        #[doc(hidden)] #[allow(clippy::octal_escapes)] pub static
        __WIT_BINDGEN_COMPONENT_TYPE : [u8; 2322] = *
        b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x94\x11\x01A\x02\x01\
A\x0e\x01B\x14\x04\0\x07closure\x03\x01\x04\0\x07element\x03\x01\x01p}\x04\0\x05\
bytes\x03\0\x02\x01r\x01\x06amountv\x04\0\x06pixels\x03\0\x04\x01r\x04\x01rv\x01\
gv\x01bv\x01av\x04\0\x05color\x03\0\x06\x01r\x04\x03topv\x05rightv\x06bottomv\x04\
leftv\x04\0\x07padding\x03\0\x08\x01q\x04\x04fill\0\0\x0cfill-portion\x01{\0\x06\
shrink\0\0\x05fixed\x01v\0\x04\0\x06length\x03\0\x0a\x01m\x03\x04left\x06center\x05\
right\x04\0\x0ahorizontal\x03\0\x0c\x01i\0\x01@\0\0\x0e\x04\0\x14[constructor]cl\
osure\x01\x0f\x01h\0\x01@\x01\x04self\x10\0y\x04\0\x12[method]closure.id\x01\x11\
\x03\0\x12thawing:core/types\x05\0\x02\x03\0\0\x07element\x02\x03\0\0\x07closure\
\x02\x03\0\0\x06pixels\x02\x03\0\0\x07padding\x02\x03\0\0\x06length\x02\x03\0\0\x0a\
horizontal\x02\x03\0\0\x05color\x01BV\x02\x03\x02\x01\x01\x04\0\x07element\x03\0\
\0\x02\x03\x02\x01\x02\x04\0\x07closure\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x06p\
ixels\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x07padding\x03\0\x06\x02\x03\x02\x01\x05\
\x04\0\x06length\x03\0\x08\x02\x03\x02\x01\x06\x04\0\x0ahorizontal\x03\0\x0a\x02\
\x03\x02\x01\x07\x04\0\x05color\x03\0\x0c\x04\0\x06button\x03\x01\x04\0\x08check\
box\x03\x01\x04\0\x06column\x03\x01\x04\0\x04text\x03\x01\x04\0\x0atext-input\x03\
\x01\x01i\x01\x01i\x0e\x01@\x01\x07content\x13\0\x14\x04\0\x13[constructor]butto\
n\x01\x15\x01h\x0e\x01i\x03\x01@\x02\x04self\x16\x08on-press\x17\0\x14\x04\0\x1c\
[method]button.on-press-with\x01\x18\x01@\x01\x04self\x16\0\x13\x04\0\x1b[method\
]button.into-element\x01\x19\x01i\x0f\x01@\x02\x05labels\x0ais-checked\x7f\0\x1a\
\x04\0\x15[constructor]checkbox\x01\x1b\x01h\x0f\x01@\x02\x04self\x1c\x09on-togg\
le\x17\0\x1a\x04\0\x1a[method]checkbox.on-toggle\x01\x1d\x01@\x01\x04self\x1c\0\x13\
\x04\0\x1d[method]checkbox.into-element\x01\x1e\x01i\x10\x01@\0\0\x1f\x04\0\x13[\
constructor]column\x01\x20\x01p\x13\x01@\x01\x08children!\0\x1f\x04\0\x17[static\
]column.from-vec\x01\"\x01h\x10\x01@\x02\x04self#\x06amount\x05\0\x1f\x04\0\x16[\
method]column.spacing\x01$\x01@\x02\x04self#\x07padding\x07\0\x1f\x04\0\x16[meth\
od]column.padding\x01%\x01@\x02\x04self#\x05width\x09\0\x1f\x04\0\x14[method]col\
umn.width\x01&\x01@\x02\x04self#\x06height\x09\0\x1f\x04\0\x15[method]column.hei\
ght\x01'\x01@\x02\x04self#\x05width\x05\0\x1f\x04\0\x18[method]column.max-width\x01\
(\x01@\x02\x04self#\x05align\x0b\0\x1f\x04\0\x16[method]column.align-x\x01)\x01@\
\x02\x04self#\x04clip\x7f\0\x1f\x04\0\x13[method]column.clip\x01*\x01@\x02\x04se\
lf#\x05child\x13\0\x1f\x04\0\x13[method]column.push\x01+\x01@\x02\x04self#\x08ch\
ildren!\0\x1f\x04\0\x15[method]column.extend\x01,\x01@\x01\x04self#\0\x13\x04\0\x1b\
[method]column.into-element\x01-\x01i\x11\x01@\x01\x08fragments\0.\x04\0\x11[con\
structor]text\x01/\x01h\x11\x01@\x02\x04self0\x04size\x05\0.\x04\0\x11[method]te\
xt.size\x011\x01@\x02\x04self0\x05color\x0d\0.\x04\0\x12[method]text.color\x012\x01\
@\x02\x04self0\x08style-fn\x17\0.\x04\0\x12[method]text.style\x013\x01@\x01\x04s\
elf0\0\x13\x04\0\x19[method]text.into-element\x014\x01i\x12\x01@\x02\x0bplacehol\
ders\x05values\05\x04\0\x17[constructor]text-input\x016\x01h\x12\x01@\x02\x04sel\
f7\x08on-input\x17\05\x04\0\x1b[method]text-input.on-input\x018\x01@\x02\x04self\
7\x09on-submit\x17\05\x04\0\x1c[method]text-input.on-submit\x019\x01@\x01\x04sel\
f7\0\x13\x04\0\x1f[method]text-input.into-element\x01:\x03\0\x13thawing:core/wid\
get\x05\x08\x02\x03\0\0\x05bytes\x01B\x18\x02\x03\x02\x01\x01\x04\0\x07element\x03\
\0\0\x02\x03\x02\x01\x02\x04\0\x07closure\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x05\
bytes\x03\0\x04\x04\0\x05table\x03\x01\x04\0\x03app\x03\x01\x01i\x06\x01@\0\0\x08\
\x04\0\x12[constructor]table\x01\x09\x01h\x06\x01i\x03\x01@\x02\x04self\x0a\x01c\
\x0b\0\x05\x04\0\x12[method]table.call\x01\x0c\x01@\x03\x04self\x0a\x01c\x0b\x05\
state\x05\0\x05\x04\0\x17[method]table.call-with\x01\x0d\x01i\x07\x01@\x01\x05st\
ate\x05\0\x0e\x04\0\x10[constructor]app\x01\x0f\x01h\x07\x01i\x01\x01@\x01\x04se\
lf\x10\0\x11\x04\0\x10[method]app.view\x01\x12\x04\0\x12thawing:core/guest\x05\x0a\
\x04\0\x14thawing:core/thawing\x04\0\x0b\x0d\x01\0\x07thawing\x03\0\0\0G\x09prod\
ucers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x06\
0.41.0";
        };
    };
}
#[doc(inline)]
pub use __export_thawing_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:thawing:core:thawing-with-all-of-its-exports-removed:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2083] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x85\x0f\x01A\x02\x01\
A\x0b\x01B\x14\x04\0\x07closure\x03\x01\x04\0\x07element\x03\x01\x01p}\x04\0\x05\
bytes\x03\0\x02\x01r\x01\x06amountv\x04\0\x06pixels\x03\0\x04\x01r\x04\x01rv\x01\
gv\x01bv\x01av\x04\0\x05color\x03\0\x06\x01r\x04\x03topv\x05rightv\x06bottomv\x04\
leftv\x04\0\x07padding\x03\0\x08\x01q\x04\x04fill\0\0\x0cfill-portion\x01{\0\x06\
shrink\0\0\x05fixed\x01v\0\x04\0\x06length\x03\0\x0a\x01m\x03\x04left\x06center\x05\
right\x04\0\x0ahorizontal\x03\0\x0c\x01i\0\x01@\0\0\x0e\x04\0\x14[constructor]cl\
osure\x01\x0f\x01h\0\x01@\x01\x04self\x10\0y\x04\0\x12[method]closure.id\x01\x11\
\x03\0\x12thawing:core/types\x05\0\x02\x03\0\0\x07element\x02\x03\0\0\x07closure\
\x02\x03\0\0\x06pixels\x02\x03\0\0\x07padding\x02\x03\0\0\x06length\x02\x03\0\0\x0a\
horizontal\x02\x03\0\0\x05color\x01BV\x02\x03\x02\x01\x01\x04\0\x07element\x03\0\
\0\x02\x03\x02\x01\x02\x04\0\x07closure\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x06p\
ixels\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x07padding\x03\0\x06\x02\x03\x02\x01\x05\
\x04\0\x06length\x03\0\x08\x02\x03\x02\x01\x06\x04\0\x0ahorizontal\x03\0\x0a\x02\
\x03\x02\x01\x07\x04\0\x05color\x03\0\x0c\x04\0\x06button\x03\x01\x04\0\x08check\
box\x03\x01\x04\0\x06column\x03\x01\x04\0\x04text\x03\x01\x04\0\x0atext-input\x03\
\x01\x01i\x01\x01i\x0e\x01@\x01\x07content\x13\0\x14\x04\0\x13[constructor]butto\
n\x01\x15\x01h\x0e\x01i\x03\x01@\x02\x04self\x16\x08on-press\x17\0\x14\x04\0\x1c\
[method]button.on-press-with\x01\x18\x01@\x01\x04self\x16\0\x13\x04\0\x1b[method\
]button.into-element\x01\x19\x01i\x0f\x01@\x02\x05labels\x0ais-checked\x7f\0\x1a\
\x04\0\x15[constructor]checkbox\x01\x1b\x01h\x0f\x01@\x02\x04self\x1c\x09on-togg\
le\x17\0\x1a\x04\0\x1a[method]checkbox.on-toggle\x01\x1d\x01@\x01\x04self\x1c\0\x13\
\x04\0\x1d[method]checkbox.into-element\x01\x1e\x01i\x10\x01@\0\0\x1f\x04\0\x13[\
constructor]column\x01\x20\x01p\x13\x01@\x01\x08children!\0\x1f\x04\0\x17[static\
]column.from-vec\x01\"\x01h\x10\x01@\x02\x04self#\x06amount\x05\0\x1f\x04\0\x16[\
method]column.spacing\x01$\x01@\x02\x04self#\x07padding\x07\0\x1f\x04\0\x16[meth\
od]column.padding\x01%\x01@\x02\x04self#\x05width\x09\0\x1f\x04\0\x14[method]col\
umn.width\x01&\x01@\x02\x04self#\x06height\x09\0\x1f\x04\0\x15[method]column.hei\
ght\x01'\x01@\x02\x04self#\x05width\x05\0\x1f\x04\0\x18[method]column.max-width\x01\
(\x01@\x02\x04self#\x05align\x0b\0\x1f\x04\0\x16[method]column.align-x\x01)\x01@\
\x02\x04self#\x04clip\x7f\0\x1f\x04\0\x13[method]column.clip\x01*\x01@\x02\x04se\
lf#\x05child\x13\0\x1f\x04\0\x13[method]column.push\x01+\x01@\x02\x04self#\x08ch\
ildren!\0\x1f\x04\0\x15[method]column.extend\x01,\x01@\x01\x04self#\0\x13\x04\0\x1b\
[method]column.into-element\x01-\x01i\x11\x01@\x01\x08fragments\0.\x04\0\x11[con\
structor]text\x01/\x01h\x11\x01@\x02\x04self0\x04size\x05\0.\x04\0\x11[method]te\
xt.size\x011\x01@\x02\x04self0\x05color\x0d\0.\x04\0\x12[method]text.color\x012\x01\
@\x02\x04self0\x08style-fn\x17\0.\x04\0\x12[method]text.style\x013\x01@\x01\x04s\
elf0\0\x13\x04\0\x19[method]text.into-element\x014\x01i\x12\x01@\x02\x0bplacehol\
ders\x05values\05\x04\0\x17[constructor]text-input\x016\x01h\x12\x01@\x02\x04sel\
f7\x08on-input\x17\05\x04\0\x1b[method]text-input.on-input\x018\x01@\x02\x04self\
7\x09on-submit\x17\05\x04\0\x1c[method]text-input.on-submit\x019\x01@\x01\x04sel\
f7\0\x13\x04\0\x1f[method]text-input.into-element\x01:\x03\0\x13thawing:core/wid\
get\x05\x08\x04\04thawing:core/thawing-with-all-of-its-exports-removed\x04\0\x0b\
-\x01\0'thawing-with-all-of-its-exports-removed\x03\0\0\0G\x09producers\x01\x0cp\
rocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
