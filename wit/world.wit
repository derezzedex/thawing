package component:iced-thawing;

interface types {
  resource closure {
    constructor();

    id: func() -> u32;
  }

  resource element {}

  type pixels = f32;

  record color {
    r: f32,
    g: f32,
    b: f32,
    a: f32
  }
}

interface widget {
  use types.{element, closure, pixels, color};
  use host.{message};

  resource button {
    constructor(content: element);

    on-press: func(message: message) -> button;
    on-press-with: func(on-press: closure) -> button;
    into-element: func() -> element;
  }

  resource column {
    constructor();

    push: func(child: element) -> column;
    into-element: func() -> element;
  }

  resource text {
    constructor(fragment: string);

    size: func(size: pixels) -> text;
    color: func(color: color) -> text;
    into-element: func() -> element;
  }
}

interface host {
  type state = s64;

  variant message {
    increment(s64),
    decrement(s64),
  }
}

interface guest {
  use types.{element, closure};
  use host.{state, message};

  resource any {}

  resource app {
    constructor();

    view: func(state: state) -> element;
    
    call: func(c: closure) -> message;
    call-with: func(c: closure, state: any) -> message;
  }
}

world thawing {
    import types;
    import widget;
    import host;

    export guest;
}
