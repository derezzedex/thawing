package thawing:core;

interface types {
  resource closure {
    constructor();

    id: func() -> u32;
  }

  resource element {}

  type bytes = list<u8>;
  
  record pixels {
    amount: f32,
  }

  record color {
    r: f32,
    g: f32,
    b: f32,
    a: f32
  }

  record padding {
    top: f32,
    right: f32,
    bottom: f32,
    left: f32,
  }

  variant length {
    fill,
    fill-portion(u16),
    shrink,
    fixed(f32),
  }

  enum horizontal {
    left,
    center,
    right,
  }
}

interface widget {
  use types.{element, closure, pixels, padding, length, horizontal, color};
  use host.{message};

  resource button {
    constructor(content: element);

    on-press: func(message: message) -> button;
    on-press-with: func(on-press: closure) -> button;
    into-element: func() -> element;
  }

  resource checkbox {
    constructor(label: string, is-checked: bool);

    on-toggle: func(on-toggle: closure) -> checkbox;
    into-element: func() -> element;
  }

  resource column {
    constructor();
    from-vec: static func(children: list<element>) -> column;

    spacing: func(amount: pixels) -> column;
    padding: func(padding: padding) -> column;
    width: func(width: length) -> column;
    height: func(height: length) -> column;
    max-width: func(width: pixels) -> column;
    align-x: func(align: horizontal) -> column;
    clip: func(clip: bool) -> column;

    push: func(child: element) -> column;
    extend: func(children: list<element>) -> column;

    into-element: func() -> element;
  }

  resource text {
    constructor(fragment: string);

    size: func(size: pixels) -> text;
    color: func(color: color) -> text;
    into-element: func() -> element;
  }
}

interface host {
  record state {
    counter: s64,
    toggled: bool,
  }

  variant message {
    toggled(bool),
    increment,
    decrement,
  }
}

interface runtime {
  use types.{closure, bytes};
  use host.{message};

  resource table {
    constructor();
    call: func(c: closure) -> message;
    call-with: func(c: closure, state: bytes) -> message;
  }
}

interface guest {
  use types.{element};
  use host.{state};

  resource app {
    constructor();

    view: func(state: state) -> element;
  }
}

world thawing {
    import types;
    import widget;
    import host;

    export runtime;
    export guest;
}
