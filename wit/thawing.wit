package thawing:core;

interface types {
  resource closure {
    constructor();

    id: func() -> u32;
  }

  resource element {}

  type bytes = list<u8>;
  type pixels = f32;

  record color {
    r: f32,
    g: f32,
    b: f32,
    a: f32
  }
}

interface widget {
  use types.{element, closure, pixels, color};
  use host.{message};

  resource button {
    constructor(content: element);

    on-press: func(message: message) -> button;
    on-press-with: func(on-press: closure) -> button;
    into-element: func() -> element;
  }

  resource checkbox {
    constructor(label: string, is-checked: bool);

    on-toggle: func(on-toggle: closure) -> checkbox;
    into-element: func() -> element;
  }

  resource column {
    constructor();

    push: func(child: element) -> column;
    into-element: func() -> element;
  }

  resource text {
    constructor(fragment: string);

    size: func(size: pixels) -> text;
    color: func(color: color) -> text;
    into-element: func() -> element;
  }
}

interface host {
  record state {
    counter: s64,
    toggled: bool,
  }

  variant message {
    toggled(bool),
    increment(s64),
    decrement(s64),
  }
}

interface runtime {
  use types.{closure, bytes};
  use host.{message};

  resource table {
    constructor();
    call: func(c: closure) -> message;
    call-with: func(c: closure, state: bytes) -> message;
  }
}

interface guest {
  use types.{element};
  use host.{state};

  resource app {
    constructor();

    view: func(state: state) -> element;
  }
}

world thawing {
    import types;
    import widget;
    import host;

    export runtime;
    export guest;
}
